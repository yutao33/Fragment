#!/usr/bin/env python
"""
run this file:
sudo -E python mininet.py {*.graphml}
"""

import sys
import json
import re
from mininet.clean import cleanup
from mininet.net import Mininet
from mininet.topo import Topo
from mininet.link import TCLink
from mininet.node import RemoteController
from mininet.node import UserSwitch
from mininet.cli import CLI
from mininet.log import MininetLogger

ip_re = re.compile(r"^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$")

class MininetSimulator(object):

    def __init__(self, graph, controller_addr):
        self.graph = graph
        self.mininet_topo = Topo();
        self.controller_addr = controller_addr
        #if (self.controller_addr == "localhost"):
        #    self.controller_addr = "127.0.0.1"

    def generate_topo(self):
        nodes = sortNodes(self.graph["nodes"])
        name = initiateName(nodes)
        edges = sortEdges(self.graph["edges"], name)
        for i in range(len(nodes)):
            node = nodes[i]
            if node["class"] == "circleHClass":
                if (ip_re.match(node["title"])):
                    self.mininet_topo.addHost(name[node["id"]], ip=node["title"])
                else:
                    self.mininet_topo.addHost(name[node["id"]])
            elif node["class"] == "circleSClass":
                self.mininet_topo.addSwitch(name[node["id"]], protocols="OpenFlow13")
        for edge in edges:
            # set link properties here.
            # bw(Mbps), delay, loss, max_queue_size
            # source code is in {mininet_root}/mininet/link.py
            linkopts = dict()
            print "addLink:", edge[0], edge[1]
            self.mininet_topo.addLink(edge[0], edge[1], **linkopts)

    def run(self):
        self.generate_topo()
        net = Mininet(topo=self.mininet_topo,
                #switch=UserSwitch,
                controller=RemoteController,
                link=TCLink,
                build=False,
                autoStaticArp=False)
        net.addController(ip=self.controller_addr)
        #net.addController('c0')
        net.start()
        CLI(net)
        net.stop()

def sortNodes(iNodes):
    hosts = [n for n in iNodes if n["class"]=="circleHClass"]
    hosts.sort(key=lambda x: x["title"])
    switches = [n for n in iNodes if n["class"]=="circleSClass"]
    switches.sort(key=lambda x: x["title"])
    return hosts + switches

def initiateName(node):
    return {node[i]["id"]: "h"+str(i+1) if node[i]["class"]=="circleHClass" else node[i]["title"] for i in range(len(node))}

def sortEdges(iEdges, name):
    oEdges = [(name[e["source"]], name[e["target"]])
        if name[e["source"]] < name[e["target"]]
        else (name[e["target"]], name[e["source"]]) for e in iEdges]
    oEdges.sort()
    return oEdges

def main():
    try:
        MininetLogger().setLogLevel(levelname="info")
        topologydata = sys.argv[2]
        g = json.loads(topologydata)
        sim = MininetSimulator(g, sys.argv[1])
        sim.run()
    except Exception:
        cleanup()

if __name__ == "__main__":
    if len(sys.argv) < 3:
        print "Usage: ./mininet.py [CONTROLLER_ADDR] [TOPOLOGY_DATA]"
        sys.exit()
    main()
